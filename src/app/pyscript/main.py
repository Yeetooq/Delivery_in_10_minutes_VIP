import os
import webview
import threading
import asyncio
import time
import tempfile
import pygame
import speech_recognition as sr
import edge_tts

# –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (src/app)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# HTML —Ñ–∞–π–ª –∫–∞—Ä—Ç—ã
MAP_HTML = os.path.join(BASE_DIR, 'webscript', 'map.html')

window = None
assistant_thread = None
assistant_running = False
assistant_stop_event = threading.Event()


class Api:
    def start_voice_assistant(self):
        global assistant_thread, assistant_running, assistant_stop_event
        if assistant_running:
            print("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        print("–ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞")
        assistant_stop_event.clear()
        assistant_thread = threading.Thread(target=assistant_loop, daemon=True)
        assistant_thread.start()
        assistant_running = True

    def stop_voice_assistant(self):
        global assistant_running, assistant_stop_event
        if not assistant_running:
            print("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return

        print("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞")
        assistant_stop_event.set()
        assistant_running = False


async def speak_async(text):
    temp_path = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3").name
    tts = edge_tts.Communicate(text, voice="ru-RU-DmitryNeural", rate="+40%")
    await tts.save(temp_path)

    pygame.mixer.init()
    pygame.mixer.music.load(temp_path)
    pygame.mixer.music.play()
    while pygame.mixer.music.get_busy():
        pygame.time.Clock().tick(20)
    pygame.mixer.quit()
    os.remove(temp_path)


def speak(text):
    try:
        asyncio.run(speak_async(text))
    except Exception as e:
        print("TTS error:", e)


def listen_once(timeout=5, phrase_time_limit=7):
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("üéß –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã...")
        r.pause_threshold = 1.0
        try:
            audio = r.listen(source, timeout=timeout, phrase_time_limit=phrase_time_limit)
        # –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ—á–∏
        except sr.WaitTimeoutError:
            return ""
    try:
        query = r.recognize_google(audio, language='ru-RU')
        print(f"üó£ –í—ã —Å–∫–∞–∑–∞–ª–∏: {query}")
        return query.lower()
    except sr.UnknownValueError:
        return ""
    except sr.RequestError:
        speak("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")
        return ""


def js_escape(s: str) -> str:
    if s is None:
        return ''
    return s.replace("\\", "\\\\").replace("'", "\\'").replace("\n", "\\n").replace("\r", "")


def call_js(js_code: str):
    global window
    try:
        if window:
            window.evaluate_js(js_code)
        else:
            print("Webview window –Ω–µ –≥–æ—Ç–æ–≤")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ JS:", e)


def send_voice_command_to_map(command: str):
    safe = js_escape(command)
    js = f"window.handleVoiceCommand('{safe}');"
    call_js(js)


def process_map_command(command: str):
    command = command.lower()

    # –í–∫–ª—é—á–µ–Ω–∏–µ –∑–æ–Ω
    if any(phrase in command for phrase in ["–ø–æ–∫–∞–∂–∏ –∑–æ–Ω—ã", "–ø–æ–∫–∞–∑–∞—Ç—å –∑–æ–Ω—ã", "–æ—Ç–æ–±—Ä–∞–∑–∏ –∑–æ–Ω—ã", "–≤–∫–ª—é—á–∏ –∑–æ–Ω—ã",
                                            "–ø–æ–∫–∞–∂–∏ –∑–æ–Ω–∞"]):
        send_voice_command_to_map('{"action": "zones", "state": "show"}')
        speak("–í–∫–ª—é—á–∞—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏")
        return True

    # –°–∫—Ä—ã—Ç–∏–µ –∑–æ–Ω
    if any(phrase in command for phrase in ["—Å–∫—Ä–æ–π –∑–æ–Ω—ã", "—É–±–µ—Ä–∏ –∑–æ–Ω—ã", "–≤—ã–∫–ª—é—á–∏ –∑–æ–Ω—ã", "—Å–ø—Ä—è—á—å –∑–æ–Ω—ã"]):
        send_voice_command_to_map('{"action": "zones", "state": "hide"}')
        speak("–í—ã–∫–ª—é—á–∞—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏")
        return True

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
    if any(phrase in command for phrase in ["–ø–æ—Å—Ç—Ä–æ–π –º–∞—Ä—à—Ä—É—Ç", "–ø–æ—Å—Ç—Ä–æ–∏ –º–∞—Ä—à—Ä—É—Ç", "–ø–æ—Å—Ç—Ä–æ–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç"]):
        addr = command

        routing_mode = "auto"
        if "–ø–µ—à–∫–æ–º" in addr or "–Ω–∞ –Ω–æ–≥–∞—Ö" in addr:
            routing_mode = "pedestrian"
        elif "–Ω–∞ –º–∞—à–∏–Ω–µ" in addr or "–Ω–∞ –∞–≤—Ç–æ" in addr or "–∞–≤—Ç–æ" in addr:
            routing_mode = "auto"

        # –ß–∏—Å—Ç–∏–º –∞–¥—Ä–µ—Å
        addr = (addr
                .replace("–ø–æ—Å—Ç—Ä–æ–π –º–∞—Ä—à—Ä—É—Ç", "")
                .replace("–ø–æ—Å—Ç—Ä–æ–∏ –º–∞—Ä—à—Ä—É—Ç", "")
                .replace("–ø–æ—Å—Ç—Ä–æ–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç", "")
                .replace("–¥–æ", "")
                .replace("–ø–µ—à–∫–æ–º", "")
                .replace("–Ω–∞ –Ω–æ–≥–∞—Ö", "")
                .replace("–Ω–∞ –º–∞—à–∏–Ω–µ", "")
                .replace("–Ω–∞ –∞–≤—Ç–æ", "")
                .replace("–∞–≤—Ç–æ", "")
                .strip())

        if not addr:
            speak("–ù–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª –∞–¥—Ä–µ—Å –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            return True

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –≤ JS
        js_command = {
            "action": "route",
            "address": addr,
            "mode": routing_mode
        }
        send_voice_command_to_map(str(js_command).replace("'", '"'))

        # "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç"
        js_code = f"""
            let input = document.querySelector('input[type="text"], input');
            if(input) input.value = '{addr}';
            let btn = Array.from(document.querySelectorAll('button')).find(b => 
                /–ø–æ—Å—Ç—Ä–æ/i.test(b.innerText) || /–º–∞—Ä—à—Ä—É—Ç/i.test(b.innerText)
            );
            if(btn) btn.click();
        """
        webview.windows[0].evaluate_js(js_code)

        speak(f"–°—Ç—Ä–æ—é –º–∞—Ä—à—Ä—É—Ç –¥–æ {addr} {'–ø–µ—à–∫–æ–º' if routing_mode == 'pedestrian' else '–Ω–∞ –º–∞—à–∏–Ω–µ'}")
        return True

    # –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    if any(phrase in command for phrase in ["–æ—á–∏—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç", "—É–±–µ—Ä–∏ –º–∞—Ä—à—Ä—É—Ç", "—Å–±—Ä–æ—Å—å –º–∞—Ä—à—Ä—É—Ç"]):
        send_voice_command_to_map('{"action": "clearRoute"}')
        speak("–ú–∞—Ä—à—Ä—É—Ç –æ—á–∏—â–µ–Ω")
        return True

    return False


def assistant_loop():
    hour = time.localtime().tm_hour
    if 5 <= hour < 12:
        greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= hour < 18:
        greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    else:
        greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    speak(f"{greeting}. –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω.")

    while not assistant_stop_event.is_set():
        phrase = listen_once(timeout=8, phrase_time_limit=6)
        if assistant_stop_event.is_set():
            break
        if not phrase:
            continue

        print("–û–±—Ä–∞–±–æ—Ç–∞—é –∫–æ–º–∞–Ω–¥—É:", phrase)
        handled = process_map_command(phrase)
        if handled:
            continue

        if "–ø—Ä–∏–≤–µ—Ç" in phrase:
            speak("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
        elif "–≤—Ä–µ–º—è" in phrase:
            now = time.strftime("%H:%M")
            speak(f"–°–µ–π—á–∞—Å {now}")
        elif "–≤—ã—Ö–æ–¥" in phrase or "–∑–∞–≤–µ—Ä—à–∞–µ–º" in phrase:
            speak("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è")
            assistant_stop_event.set()
            break
        else:
            speak("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

    speak("–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω.")


def start_app():
    global window
    api = Api()
    url = f'file:///{MAP_HTML.replace(os.path.sep, "/")}'
    window = webview.create_window('–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ 10 –º–∏–Ω—É—Ç', url, js_api=api, width=1100, height=700)
    webview.start()


if __name__ == "__main__":
    start_app()
